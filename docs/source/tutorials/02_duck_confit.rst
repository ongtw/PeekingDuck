***********
Duck Confit
***********

.. include:: /include/substitution.rst

This tutorial presents intermediate recipes for cooking up new PeekingDuck
pipelines by modifying the nodes and their configs.


.. _tutorial_more_object_detection:

More Object Detection
=====================

This section will demonstrate how to change the settings of PeekingDuck's nodes 
to vary their functionalities.

If you had completed the earlier :ref:`object detection
tutorial<tutorial_object_detection>`, you will have the necessary folder and can skip to
the next step.
Otherwise, create a new PeekingDuck project as shown below:

.. admonition:: Terminal Session

    | \ :blue:`[~user]` \ > \ :green:`mkdir object_detection` \
    | \ :blue:`[~user]` \ > \ :green:`cd object_detection` \
    | \ :blue:`[~user/object_detection]` \ > \ :green:`peekingduck init` \

Next, download this demo video `cat_and_computer.mp4 
<https://storage.googleapis.com/peekingduck/videos/cat_and_computer.mp4>`_ and
save it into the ``object_detection`` folder.

The folder should contain the following:

.. parsed-literal::

   \ :blue:`object_detection/` \ |Blank|
   ├── cat_and_computer.mp4
   ├── pipeline_config.yml
   └── \ :blue:`src/` \ |Blank|

To perform object detection on the ``cat_and_computer.mp4`` file, edit the
``pipeline_config.yml`` file as follows:

.. code-block:: yaml
   :linenos:

   nodes:
   - input.visual:
       source: cat_and_computer.mp4
   - model.yolo:
       detect: ["cup", "cat", "laptop", "keyboard", "mouse"]
   - draw.bbox:
       show_labels: True    # configure draw.bbox to display object labels
   - output.screen

Here is a step-by-step explanation of what has been done:

   | Line 2 :mod:`input.visual`: tells PeekingDuck to load the ``cat_and_computer.mp4``.
   | Line 4 :mod:`model.yolo`: by default, the YOLO model detects ``person`` only.
   |        The ``cat_and_computer.mp4`` contains other classes of objects like cup, cat, laptop, etc. 
   |        So we have to change the model settings to detect the other object classes.
   | Line 6 :mod:`draw.bbox`: reconfigure this node to display the detected object class label.

Run the above with the command :greenbox:`peekingduck run`. |br|

   .. figure:: /assets/tutorials/ss_cat_computer.png
      :width: 416
      :alt: Cat and Computer Screenshot

      Cat and Computer Screenshot

You should see a display of the ``cat_and_computer.mp4`` with the various objects being
highlighted by PeekingDuck in bounding boxes. |br|
The 30-second video will auto-close at the end, or you can press :greenbox:`q` to end early.

    .. note::

       The YOLO model can detect 80 different :ref:`object classes
       <general-object-detection-ids>`. By default, it only detects the ``"person"`` class. Use
       ``detect: ["*"]`` in the ``pipeline_config.yml`` to configure the model to detect all 80
       classes.


.. _tutorial_media_writer:

Record Video File with FPS
==========================

This section demonstrates how to record PeekingDuck's output into a video file.
In addition, we will modify the pipeline by adding new nodes to calculate the
frames per second (FPS) and to show the FPS.

Edit ``pipeline_config.yml`` as shown below:

.. code-block:: yaml
   :linenos:

   nodes:
   - input.visual:
       source: cat_and_computer.mp4
   - model.yolo:
       detect: ["cup", "cat", "laptop", "keyboard", "mouse"]
   - draw.bbox:
       show_labels: True
   - dabble.fps                           # add new dabble node
   - draw.legend:                         # show fps
       show: ["fps"]
   - output.screen
   - output.media_writer:                 # add new output node
       output_dir: /folder/to/save/video  # this is a folder name

The additions are:

   | Line 8 :mod:`dabble.fps`: adds new :mod:`dabble` node to the pipeline. This node calculates the FPS.
   | Line 9 :mod:`draw.legend`: adds new :mod:`draw` node to display the FPS.
   | Line 12 :mod:`output.media_writer`: adds new :mod:`output` node to save PeekingDuck's
            output to a local video file. It requires a local folder path. If the folder
            is not available, PeekingDuck will create the folder automatically. The
            filename is auto-generated by PeekingDuck based on the input source.

Run the above with the command :greenbox:`peekingduck run`. |br|
You will see the same video being played, but now it has the FPS counter.
When the video ends, an ``mp4`` video file will be created and saved in the
specified folder.

    .. note::

       You can view all the available nodes and their respective configurable
       settings in PeekingDuck's :ref:`API documentation <api_doc>`.


.. _tutorial_behind_the_scenes:

Configuration - Behind the Scenes
=================================

Here is an explanation on what goes on behind the scenes when you configure a node.
Every node has a set of default configuration.
For instance, :mod:`draw.bbox` default configuration is:

.. code-block:: yaml
   :linenos:

   input: ["bboxes", "img", "bbox_labels"]
   output: ["none"]

   show_labels: False

| The keys ``input`` and ``output`` are compulsory and common across every node.
| ``input`` specifies the data types the node would consume, to be read from the pipeline.
| ``output`` specifies the data types the node would produce, to be put into the pipeline.

By default, ``show_labels`` is disabled.
When you enable it with ``show_labels: True``, what PeekingDuck does is to override
the default ``show_labels: False`` configuration with your specified ``True`` value.
You will see another instance of this at work in the advanced *Peaking Duck* tutorial on
:ref:`Tracking People Within a Zone <tutorial_tracking_people_within_zone>`.


.. _tutorial_augment:

Augmenting Images
=================

PeekingDuck has a class of :mod:`augment` nodes that can be used to perform preprocessing
or postprocessing of images/videos.
Augment currently lets you modify the brightness and contrast.

The ``pipeline_config.yml`` below shows how to use the :mod:`augment.brightness` node
within the pipeline:

.. code-block:: yaml
   :linenos:

   nodes:
   - input.visual:
       source: https://storage.googleapis.com/peekingduck/videos/wave.mp4
   - model.yolo
   - augment.brightness:
       beta: 50         # ranges from -100 (darken) to +100 (brighten)
   - draw.bbox
   - output.screen

The following figure shows the difference between the original vs the brightened image:

    .. figure:: /assets/tutorials/augment_brightness.png
        :alt: augment.brightness screenshot - original vs brightened image

        Augment Brightness: Original vs Brightened Image


    .. note::

        | Royalty free video of cat and computer from: https://www.youtube.com/watch?v=-C1TEGZavko
        | Royalty free video of man waving hand from: https://www.youtube.com/watch?v=IKj_z2hgYUM

